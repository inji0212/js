//변수 선언방식

var num = 10;
// var은 사용하지 않는 옛날 방식
// 이유: a.js 라하고 script에 console.log(num); 하면 결과가 10이 나옴
// b.js를 만들고(b에서 num은 30)
// 두 js를 불러오면 console.log(num)은 30으로 뒤에 있는 파일로 덮어진다.
// var라서 생기는 문제

let num1 = 10;
//let의 경우 같은 상황시 이미 num이 있다라고 에러가 생긴다.
//let은 이미 만들어진저장공간에 값을 바꿀 수 있다.
// 단순 num=3;으로 하면 값이 에러없이 3이 나온다.

const num2 = 10;
// 이미 정의가 이뤄진 값에 재 할당이 일어나면 안되는 경우도 존재한다.
//=> 이를 위해 const가 존재
// 위와 같은 상황시 재할당할 수 없다라는 에러가뜸

// 1. 자바스크립트 역사
// 2. 자바스크립트 실행 방법
// 2.1 node 명령어를 사용하는 방법
// 2.2 code runner 익스텐션을 사용하는 방법
// 2.3 html 파일에서 script 태그 사용한느 방법
// 2.3.1 외부 스크립트 -> <script src=".."></script>
// 2.3.1.1 head 태그 사이에서 작성하는 법
// 2.3.1.2 body 태그가 끝나기 전에
// 2.3.1.3 script async, defer

// 2.3.2 내부 스크립트 -> <script></script>
// 2.4 웹브라우저의 개발자 도구 -> console 탭에서 작성하는 방법

// 3. 변수/ 상수
// 3.1 상수(?)
// 3.2 변수 -> 변하는 수 -> 변하는 값
// 3.2.1 var, let,const
// 3.3 상수(X) -> 재할당이 불가능한 선언 키워드
// 3.3.1 const 키워드 선언한 것을 상수 why? const-> 재할당이 안되니까
// -> 값이 안변한다.

const arr = [10];
arr.push[20];
console.log(arr);
// console에 [ 10, 20 ]

// 4. var -> 잘대 사용하지 않는다.
// 4.1 let, const -> 재할당이 필요할 때는 let, 재할당이 필요없을 때는 const
//4.1.1 습관이 되도록

const sum = 10;

// ; -> 세미콜론
// : -> 클론
// " " -> 큰 따옴표
// ' -> 작은 따옴표
// ` -> 백틱
// [] -> 대괄호
// {} -> 중괄호
// () -> 소괄호

// 주석
/* 여러줄 주석*/
// ctrl +/ -> 선택 코드 주석
// 코드 러너 드래그한 것만 런 할 수 있다.
